<?xml version="1.0"?>
<robot name="hexar" xmlns:xacro="https://www.ros.org/wiki/xacro">
    <!-- Refer to Nav2's URDF tutorial -->
    <!-- https://navigation.ros.org/setup_guides/urdf/setup_urdf.html -->

    <!-- define colors -->
    <material name="black">
        <color rgba="0 0 0 1" />
    </material>
    <material name="white">
        <color rgba="1 1 1 1" />
    </material>
    <material name="purple">
        <color rgba="0.3098 0.1765 0.4980 1" />
    </material>
    <material name="gray">
        <color rgba="0.5 0.5 0.5 1" />
    </material>

    <!-- Define robot constants -->
    <!-- pi -->
    <xacro:property name="PI" value="3.141592653589793" />
    <!-- base properties -->
    <xacro:property name="base_radius" value="0.1" />
    <xacro:property name="base_height" value="0.009" />
    <xacro:property name="base_mass" value="3" />
    <!-- wheel properties -->
    <xacro:property name="wheel_xoff" value="0.035" />
    <xacro:property name="wheel_yoff" value="0.095" />
    <xacro:property name="wheel_zoff" value="0.009" />
    <xacro:property name="wheel_radius" value="0.04" />
    <xacro:property name="wheel_width" value="0.01" />
    <xacro:property name="wheel_mass" value="0.2" />
    <!-- caster properties -->
    <xacro:property name="caster_xoff" value="-0.08" />
    <xacro:property name="caster_zoff" value="-0.016" />
    <xacro:property name="caster_radius" value="0.015" />
    <xacro:property name="caster_mass" value="0.1" />
    <!-- lidar properties -->
    <xacro:property name="lidar_radius" value="0.035" />
    <xacro:property name="lidar_height" value="0.02" />
    <xacro:property name="lidar_zoff" value="0.1" />
    <xacro:property name="lidar_mass" value="0.17" />
    <!-- imu properties -->
    <!-- <xacro:property name="imu_width" value="0.02" /> -->
    <!-- <xacro:property name="imu_depth" value="0.015" /> -->
    <!-- <xacro:property name="imu_height" value="0.001" /> -->
    <!-- <xacro:property name="imu_mass" value="0.002" /> -->


    <!-- Define intertial property macros  -->
    <xacro:macro name="box_inertia" params="m w d h">
        <inertial>
            <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}" />
            <mass value="${m}" />
            <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + h*h)}" iyz="0.0" izz="${(m/12) * (w*w + d*d)}" />
        </inertial>
    </xacro:macro>

    <xacro:macro name="cylinder_inertia" params="m r h">
        <inertial>
            <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
            <mass value="${m}" />
            <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy="0" ixz="0" iyy="${(m/12) * (3*r*r + h*h)}" iyz="0" izz="${(m/2) * (r*r)}" />
        </inertial>
    </xacro:macro>

    <xacro:macro name="sphere_inertia" params="m r">
        <inertial>
            <mass value="${m}" />
            <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}" iyz="0.0" izz="${(2/5) * m * (r*r)}" />
        </inertial>
    </xacro:macro>

    <!-- Define wheel macros -->
    <xacro:macro name="wheel" params="prefix y_reflect">
        <joint name="${prefix}_joint" type="continuous">
            <parent link="base_link" />
            <child link="${prefix}_link" />
            <origin xyz="${wheel_xoff} ${y_reflect * wheel_yoff} ${wheel_zoff}" rpy="${-PI/2} 0 0" />
            <axis xyz="0 0 1" />
        </joint>

        <link name="${prefix}_link">
            <visual>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_width}" />
                </geometry>
                <material name="navy" />
            </visual>

            <collision>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_width}" />
                </geometry>
            </collision>

            <xacro:cylinder_inertia m="${wheel_mass}" r="${wheel_radius}" h="${wheel_width}" />
        </link>

    </xacro:macro>

    <!-- Robot Base -->
    <link name="base_link">
        <visual>
            <geometry>
                <cylinder length="${base_height}" radius="${base_radius}" />
            </geometry>
            <material name="white" />
        </visual>
        <collision>
            <geometry>
                <cylinder length="${base_height}" radius="${base_radius}" />
            </geometry>
        </collision>
    </link>

    <!-- Robot Footprint -->
    <joint name="footprint_joint" type="fixed">
        <parent link="base_link" />
        <child link="base_footprint" />
        <origin xyz="0.0 0.0 ${wheel_zoff-wheel_radius}" rpy="0 0 0" />
    </joint>

    <link name="base_footprint" />

    <!-- Base Inertial -->
    <joint name="base_inertial_joint" type="fixed">
        <parent link="base_link" />
        <child link="base_inertial" />
        <origin xyz="0 0 0" rpy="0 0 0" />
    </joint>

    <link name="base_inertial">
        <xacro:cylinder_inertia m="${base_mass}" r="${base_radius}" h="${base_height}" />
    </link>

    <!-- Wheels -->
    <xacro:wheel prefix="left_wheel" y_reflect="1" />

    <xacro:wheel prefix="right_wheel" y_reflect="-1" />

    <!-- Caster ball -->
    <joint name="caster_joint" type="fixed">
        <parent link="base_link" />
        <child link="caster" />
        <origin xyz="${caster_xoff} 0.0 ${caster_zoff}" rpy="0 0 0" />
    </joint>

    <link name="caster">
        <visual>
            <geometry>
                <sphere radius="${caster_radius}" />
            </geometry>
            <material name="gray" />
        </visual>

        <collision>
            <geometry>
                <sphere radius="${caster_radius}" />
            </geometry>
        </collision>

        <xacro:sphere_inertia m="${caster_mass}" r="${caster_radius}" />
    </link>

    <!-- lidar -->
    <joint name="lidar_joint" type="fixed">
        <parent link="base_link" />
        <child link="lidar_link" />
        <origin xyz="0 0 ${(base_height+lidar_height)/2+lidar_zoff}" rpy="0 0 0" />
    </joint>

    <link name="lidar_link">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <geometry>
                <cylinder radius="${lidar_radius}" length="${lidar_height}" />
            </geometry>
            <material name="purple" />
        </visual>
        <collision>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <geometry>
                <cylinder radius="${lidar_radius}" length="${lidar_height}" />
            </geometry>
        </collision>
        <xacro:cylinder_inertia m="${lidar_mass}" r="${lidar_radius}" h="${lidar_height}" />
    </link>

    <!-- imu -->
    <!-- <joint name="imu_joint" type="fixed"> -->
    <!--     <parent link="base_link" /> -->
    <!--     <child link="imu_link" /> -->
    <!--     <origin xyz="${base_width/4} 0 ${(base_height+imu_height)/2}" /> -->
    <!-- </joint> -->
    <!---->
    <!-- <link name="imu_link"> -->
    <!--     <visual> -->
    <!--         <geometry> -->
    <!--             <box size="${imu_width} ${imu_depth} ${imu_height}" /> -->
    <!--         </geometry> -->
    <!--         <material name="purple" /> -->
    <!--     </visual> -->
    <!--     <collision> -->
    <!--         <geometry> -->
    <!--             <box size="${imu_width} ${imu_depth} ${imu_height}" /> -->
    <!--         </geometry> -->
    <!--     </collision> -->
    <!--     <xacro:box_inertia m="${imu_mass}" w="${imu_width}" d="${imu_depth}" h="${imu_height}" /> -->
    <!-- </link> -->
    <!-- <gazebo reference="imu_link"> -->
    <!--     <material>Gazebo/Purple</material> -->
    <!--     <sensor name="imu_sensor" type="imu"> -->
    <!--         <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin"> -->
    <!--             <ros> -->
    <!--                 <namespace>/bot</namespace> -->
    <!--                 <remapping>~/out:=imu</remapping> -->
    <!--             </ros> -->
    <!--             <initial_orientation_as_reference>false</initial_orientation_as_reference> -->
    <!--         </plugin> -->
    <!--         <always_on>true</always_on> -->
    <!--         <update_rate>100</update_rate> -->
    <!--         <visualize>true</visualize> -->
    <!--         <imu> -->
    <!--             <angular_velocity> -->
    <!--                 <x> -->
    <!--                     <noise type="gaussian"> -->
    <!--                         <mean>0.0</mean> -->
    <!--                         <stddev>2e-4</stddev> -->
    <!--                         <bias_mean>0.0000075</bias_mean> -->
    <!--                         <bias_stddev>0.0000008</bias_stddev> -->
    <!--                     </noise> -->
    <!--                 </x> -->
    <!--                 <y> -->
    <!--                     <noise type="gaussian"> -->
    <!--                         <mean>0.0</mean> -->
    <!--                         <stddev>2e-4</stddev> -->
    <!--                         <bias_mean>0.0000075</bias_mean> -->
    <!--                         <bias_stddev>0.0000008</bias_stddev> -->
    <!--                     </noise> -->
    <!--                 </y> -->
    <!--                 <z> -->
    <!--                     <noise type="gaussian"> -->
    <!--                         <mean>0.0</mean> -->
    <!--                         <stddev>2e-4</stddev> -->
    <!--                         <bias_mean>0.0000075</bias_mean> -->
    <!--                         <bias_stddev>0.0000008</bias_stddev> -->
    <!--                     </noise> -->
    <!--                 </z> -->
    <!--             </angular_velocity> -->
    <!--             <linear_acceleration> -->
    <!--                 <x> -->
    <!--                     <noise type="gaussian"> -->
    <!--                         <mean>0.0</mean> -->
    <!--                         <stddev>1.7e-2</stddev> -->
    <!--                         <bias_mean>0.1</bias_mean> -->
    <!--                         <bias_stddev>0.001</bias_stddev> -->
    <!--                     </noise> -->
    <!--                 </x> -->
    <!--                 <y> -->
    <!--                     <noise type="gaussian"> -->
    <!--                         <mean>0.0</mean> -->
    <!--                         <stddev>1.7e-2</stddev> -->
    <!--                         <bias_mean>0.1</bias_mean> -->
    <!--                         <bias_stddev>0.001</bias_stddev> -->
    <!--                     </noise> -->
    <!--                 </y> -->
    <!--                 <z> -->
    <!--                     <noise type="gaussian"> -->
    <!--                         <mean>0.0</mean> -->
    <!--                         <stddev>1.7e-2</stddev> -->
    <!--                         <bias_mean>0.1</bias_mean> -->
    <!--                         <bias_stddev>0.001</bias_stddev> -->
    <!--                     </noise> -->
    <!--                 </z> -->
    <!--             </linear_acceleration> -->
    <!--         </imu> -->
    <!--     </sensor> -->
    <!-- </gazebo> -->

</robot>
